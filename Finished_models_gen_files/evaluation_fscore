import os
import numpy as np
import pandas as pd
import open3d as o3d
from scipy.spatial import KDTree

# Parameters
output_dir = "alldataset_noPretrain_noHyper_noDenoise_delInput"
csv_results_dir = "csv_results/"
distance_threshold = 0.02  # Assuming meters, equivalent to 20 mm
results = []

def compute_precision_recall_fscore(gt_points, completed_points, threshold):
    # Build KD-trees for both point clouds
    gt_tree = KDTree(gt_points)
    completed_tree = KDTree(completed_points)
    
    # Query closest points to compute precision for completed to GT
    _, indices = completed_tree.query(gt_points, k=1)
    distances, _ = gt_tree.query(completed_points[indices], k=1)
    precision = np.mean(distances <= threshold)
    
    # Query closest points to compute recall for GT to completed
    _, indices = gt_tree.query(completed_points, k=1)
    distances, _ = completed_tree.query(gt_points[indices], k=1)
    recall = np.mean(distances <= threshold)
    
    # Compute F-Score
    if precision + recall > 0:
        fscore = 2 * (precision * recall) / (precision + recall)
    else:
        fscore = 0
    
    return precision * 100, recall * 100, fscore * 100  # Convert to percentages

# Ensure the CSV results directory exists
os.makedirs(csv_results_dir, exist_ok=True)

for base_name in os.listdir(output_dir):
    if base_name.endswith("_gt.ply"):
        gt_file = os.path.join(output_dir, base_name)
        completed_file = os.path.join(output_dir, f"{base_name.split('_gt')[0]}_pc_recon_denoised.ply")

        # Load point clouds
        gt_cloud = o3d.io.read_point_cloud(gt_file)
        completed_cloud = o3d.io.read_point_cloud(completed_file)

        # Convert Open3D PointClouds to numpy arrays
        gt_points = np.asarray(gt_cloud.points)
        completed_points = np.asarray(completed_cloud.points)

        # Compute precision, recall, and F-Score
        precision, recall, fscore = compute_precision_recall_fscore(gt_points, completed_points, distance_threshold)
        
        # Store the results
        results.append({
            "base_name": base_name,
            "Precision": precision,
            "Recall": recall,
            "Fscore": fscore
        })

# Convert results to a DataFrame and calculate means
df = pd.DataFrame(results)
mean_precision = df["Precision"].mean()
mean_recall = df["Recall"].mean()
mean_fscore = df["Fscore"].mean()

# Append means to the DataFrame
df = df.append({"base_name": "mean_metrics", "Precision": mean_precision, "Recall": mean_recall, "Fscore": mean_fscore}, ignore_index=True)

# Save the DataFrame with metrics to a CSV file
results_filename = f"point_cloud_evaluation_metrics_results_{output_dir}.csv"
df.to_csv(os.path.join(csv_results_dir, results_filename), index=False)

print(f"Completed. Evaluation metrics, including means, are saved in the CSV file: {results_filename}.")

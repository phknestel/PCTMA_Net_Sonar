import os
import numpy as np
import pandas as pd
import open3d as o3d
from scipy.spatial import cKDTree as KDTree

# Parameters
output_dir = "alldataset_noPretrain_noHyper_noDenoise_delInput"
csv_results_dir = "csv_results/"
results = []

def compute_hausdorff_distance(source_points, target_points):
    # Build KD-trees for both point clouds
    source_tree = KDTree(source_points)
    target_tree = KDTree(target_points)
    
    # Compute distances from source to target and target to source
    dist_source_to_target, _ = source_tree.query(target_points, k=1)
    dist_target_to_source, _ = target_tree.query(source_points, k=1)
    
    # Hausdorff distance is the maximum of these distances
    hausdorff_dist = max(np.max(dist_source_to_target), np.max(dist_target_to_source))
    return hausdorff_dist

# Ensure the CSV results directory exists
os.makedirs(csv_results_dir, exist_ok=True)

for base_name in os.listdir(output_dir):
    if base_name.endswith("_gt.ply"):
        gt_file = os.path.join(output_dir, base_name)
        completed_file = os.path.join(output_dir, f"{base_name.split('_gt')[0]}_pc_recon_denoised.ply")

        # Print statement indicating which files are being compared
        print(f"Comparing GT file: {gt_file} with completed file: {completed_file}")

        # Load point clouds
        gt_cloud = o3d.io.read_point_cloud(gt_file)
        completed_cloud = o3d.io.read_point_cloud(completed_file)

        # Convert Open3D PointClouds to numpy arrays
        gt_points = np.asarray(gt_cloud.points)
        completed_points = np.asarray(completed_cloud.points)

        # Compute Hausdorff Distance
        hausdorff_dist = compute_hausdorff_distance(gt_points, completed_points)
        
        # Store the results
        results.append({
            "base_name": base_name,
            "Hausdorff_Distance": hausdorff_dist
        })

# Convert results to a DataFrame and calculate the mean Hausdorff distance
df = pd.DataFrame(results)
mean_hausdorff_dist = df["Hausdorff_Distance"].mean()

# Append mean to the DataFrame
df = df.append({"base_name": "mean_hausdorff_distance", "Hausdorff_Distance": mean_hausdorff_dist}, ignore_index=True)

# Save the DataFrame with Hausdorff distances to a CSV file
results_filename = f"point_cloud_hausdorff_distance_results_{output_dir}.csv"
df.to_csv(os.path.join(csv_results_dir, results_filename), index=False)

print(f"Completed. Hausdorff distance results, including the mean, are saved in the CSV file: {results_filename}.")

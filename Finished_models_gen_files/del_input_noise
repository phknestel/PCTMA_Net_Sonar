'''
import open3d as o3d
import numpy as np

def remove_input_points_from_output(input_file, output_file, result_file):
    # Load the input and output point clouds
    input_pcd = o3d.io.read_point_cloud(input_file)
    output_pcd = o3d.io.read_point_cloud(output_file)

    # Convert to numpy arrays for easier manipulation
    input_points = np.asarray(input_pcd.points)
    output_points = np.asarray(output_pcd.points)

    # Find and remove points from the output that are in the input
    unique_output_points = np.array([pt for pt in output_points if not any(np.all(pt == input_points, axis=1))])

    # Create a new point cloud for the result
    result_pcd = o3d.geometry.PointCloud()
    result_pcd.points = o3d.utility.Vector3dVector(unique_output_points)

    # Save the result point cloud
    o3d.io.write_point_cloud(result_file, result_pcd)

# Example usage
input_ply_file = 'Pretrain_Hyper_Denoise/ground_114_pc.ply'  
output_ply_file = 'Pretrain_Hyper_Denoise/ground_114_pc_recon.ply' 
result_ply_file = 'del_input_noise_testfile.ply'  

remove_input_points_from_output(input_ply_file, output_ply_file, result_ply_file)
'''


import open3d as o3d
import numpy as np
import glob
import os
import shutil
from tqdm import tqdm  # Import tqdm for the progress bar

def remove_input_points_from_output(input_file, output_file, result_file):
    # Load the input and output point clouds
    input_pcd = o3d.io.read_point_cloud(input_file)
    output_pcd = o3d.io.read_point_cloud(output_file)

    # Convert to numpy arrays for easier manipulation
    input_points = np.asarray(input_pcd.points)
    output_points = np.asarray(output_pcd.points)

    # Find and remove points from the output that are in the input
    unique_output_points = np.array([pt for pt in output_points if not any(np.all(pt == input_points, axis=1))])

    # Create a new point cloud for the result
    result_pcd = o3d.geometry.PointCloud()
    result_pcd.points = o3d.utility.Vector3dVector(unique_output_points)

    # Save the result point cloud
    o3d.io.write_point_cloud(result_file, result_pcd)

def process_directory(input_dir, output_dir):
    # Ensure output directory exists
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

    # Find all input .ply files
    input_files = glob.glob(os.path.join(input_dir, '*_pc.ply'))

    # Process each file with a progress bar
    for input_file in tqdm(input_files, desc="Processing files"):
        base_name = os.path.basename(input_file).replace('_pc.ply', '')
        output_file = os.path.join(input_dir, f'{base_name}_pc_recon.ply')
        ground_truth_file = os.path.join(input_dir, f'{base_name}_gt.ply')
        result_file = os.path.join(output_dir, f'{base_name}_pc_recon_denoised.ply')
        gt_output_file = os.path.join(output_dir, f'{base_name}_gt.ply')

        # Process each set of files
        remove_input_points_from_output(input_file, output_file, result_file)

        # Copy the ground truth file to the output directory with the new naming convention
        shutil.copy(ground_truth_file, gt_output_file)

input_dir = 'alldataset_noPretrain_noHyper_noDenoise/'
output_dir = 'alldataset_noPretrain_noHyper_noDenoise_delInput/'
process_directory(input_dir, output_dir)







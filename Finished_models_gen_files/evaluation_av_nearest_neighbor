import os
import numpy as np
import pandas as pd
import open3d as o3d
from scipy.spatial import cKDTree as KDTree

# Parameters
output_dir = "denoise_hyper_floor_delInput"
csv_results_dir = "csv_results/"
results = []

def compute_density_metric(points):
    # Build a KD-tree for the points
    tree = KDTree(points)
    
    # Query the tree for the nearest neighbor of each point (excluding itself)
    distances, _ = tree.query(points, k=2)
    
    # The first column returns zero distance (point to itself), so use the second column
    avg_distance = np.mean(distances[:, 1])
    
    # Using average distance between points as a proxy for density
    # Lower average distance indicates higher density
    return avg_distance

# Ensure the CSV results directory exists
os.makedirs(csv_results_dir, exist_ok=True)

for base_name in os.listdir(output_dir):
    if base_name.endswith("_gt.ply"):
        gt_file = os.path.join(output_dir, base_name)
        completed_file = os.path.join(output_dir, f"{base_name.split('_gt')[0]}_pc_recon_denoised.ply")

        # Print statement indicating which files are being compared
        print(f"Comparing GT file: {gt_file} with completed file: {completed_file}")

        # Load point clouds
        gt_cloud = o3d.io.read_point_cloud(gt_file)
        completed_cloud = o3d.io.read_point_cloud(completed_file)

        # Convert Open3D PointClouds to numpy arrays
        gt_points = np.asarray(gt_cloud.points)
        completed_points = np.asarray(completed_cloud.points)

        # Compute Density Metrics
        gt_density_metric = compute_density_metric(gt_points)
        completed_density_metric = compute_density_metric(completed_points)
        
        # Store the results
        results.append({
            "base_name": base_name,
            "GT_Density_Metric": gt_density_metric,
            "Completed_Density_Metric": completed_density_metric
        })

# Convert results to a DataFrame and calculate means
df = pd.DataFrame(results)
mean_gt_density = df["GT_Density_Metric"].mean()
mean_completed_density = df["Completed_Density_Metric"].mean()

# Append means to the DataFrame
df = df.append({"base_name": "mean_density_metric", "GT_Density_Metric": mean_gt_density, "Completed_Density_Metric": mean_completed_density}, ignore_index=True)

# Save the DataFrame with density metrics to a CSV file
results_filename = f"point_cloud_density_metrics_results_{output_dir}.csv"
df.to_csv(os.path.join(csv_results_dir, results_filename), index=False)

print(f"Completed. Density metric results, including the means, are saved in the CSV file: {results_filename}.")
